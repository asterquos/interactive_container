如何重新创建干净的云端版本

==== 方法1：删除并重新创建仓库（推荐） ====

GitHub操作：
1. 登录 GitHub
2. 进入旧的仓库页面
3. 点击 Settings（设置）
4. 滚动到底部，点击 "Delete this repository"
5. 输入仓库名确认删除
6. 创建新的同名仓库

本地操作：
1. 在项目文件夹中删除 .git 文件夹（如果存在）
   rmdir /s .git
2. 初始化新的git仓库
   git init
3. 添加所有文件
   git add .
4. 提交
   git commit -m "初始版本 - 集装箱装载管理系统v1.0"
5. 关联新的远程仓库
   git remote add origin https://github.com/你的用户名/仓库名.git
6. 推送
   git push -u origin main

==== 方法2：强制覆盖云端 ====

如果不想删除仓库：
1. git init（如果没有.git文件夹）
2. git add .
3. git commit -m "重新开始 - 清理版本v1.0"
4. git remote add origin https://github.com/你的用户名/仓库名.git
5. git push --force origin main

注意：这会完全覆盖云端历史！

==== 方法3：创建新分支作为主版本 ====

1. git checkout -b v1.0-clean
2. git add .
3. git commit -m "清理版本v1.0"
4. git push origin v1.0-clean
5. 在GitHub上将v1.0-clean设为默认分支
6. 删除旧的main分支

==== 推荐的文件结构 ====

上传到云端的文件：
✓ core/ - 核心代码
✓ data/ - 数据模块
✓ gui/ - 界面代码
✓ utils/ - 工具模块
✓ test_data/ - 示例数据
✓ main.py - 主程序
✓ requirements.txt - 依赖列表
✓ setup_windows.bat - 环境设置
✓ run_windows.bat - 运行脚本
✓ build_windows.bat - 打包脚本
✓ build_windows.py - 打包程序
✓ 使用说明.txt - 用户手册

不要上传：
✗ dist/ - 打包输出文件夹
✗ build/ - 构建临时文件
✗ __pycache__/ - Python缓存
✗ *.pyc - 编译文件
✗ venv/ - 虚拟环境
✗ .vscode/ - 编辑器配置

==== .gitignore 文件内容 ====

创建 .gitignore 文件，内容如下：

# Python
__pycache__/
*.py[cod]
*.pyo
*.pyd
.Python
env/
venv/
ENV/

# PyInstaller
build/
dist/
*.spec

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Project specific
container_app.log

==== 使用建议 ====

对于用户分发：
- 开发者：给完整的项目文件夹
- 最终用户：只给打包后的 dist 文件夹

对于版本管理：
- 使用 git tag 标记版本
- git tag v1.0.0
- git push origin v1.0.0